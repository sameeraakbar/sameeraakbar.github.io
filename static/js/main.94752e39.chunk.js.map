{"version":3,"sources":["locations/langham.png","locations/qlicky.png","locations/kone.png","locations/qlicky.js","locations/langham.js","locations/kone.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","QRCode","require","setProp","propValue","defautlValue","undefined","defaultKeyboard","Qlicky","props","handleClick","e","value","target","name","state","baseInput","setState","button","buttonVariant","numberButtonVariant","fontColor","numberButtonFont","dangerButtonVariant","dangerButtonFont","charAt","match","floorButtonVariant","floorButtonFont","Button","onClick","className","defaultButtonClass","style","fontSize","buttonFontSize","fontWeight","backgroundColor","borderColor","color","keyboard","align","baseKeyboardClass","keys","map","listValue","_","key","handleChange","title","logo","useTitle","icon","logoWidth","qrWidth","document","this","content","rel","type","href","sizes","src","alt","width","size","renderAs","fgColor","bgColor","TextField","id","label","variant","onChange","alignItems","React","Component","Lamgham","Kone","kone","App","exact","path","component","Langham","Boolean","window","location","hostname","app","basename","process","console","log","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.94752e39.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/langham.753cb62e.png\";","module.exports = __webpack_public_path__ + \"static/media/qlicky.7d61ad0b.png\";","module.exports = __webpack_public_path__ + \"static/media/kone.29357ec4.png\";","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport { Button } from 'react-bootstrap'\nimport { TextField } from '@material-ui/core'\nimport logo from  './qlicky.png'\nimport Helmet from 'react-helmet'\n\nvar QRCode = require('qrcode.react');\n\nconst appleTouchIcon = \"icons/qlicky.ico\"\nconst buttonFontSize = 30;\n\nconst setProp = (propValue, defautlValue) => {\n    return propValue !== undefined ? propValue : defautlValue\n}\n\nconst isLetter = (str) => {\n    return str.match(/[a-z]/i)\n}\n\nconst defaultFloorFontColor = \"#FFFFFF\"\nconst defaultFloorVariant = \"#1976d2\"\n\nconst defaultNumberFontColor = \"#000000\"\nconst defaultNumberVariant = \"#f5f5f5\"\n\nconst defaultDangerFontColor = \"FFFFFF\"\nconst defaultDangerVariant = \"#212121\"\n\nconst defaultKeyboard = [[\"P\", \"U\", \"1\", \"2\", \"3\"], [\"R\", \"L\", \"4\", \"5\", \"6\"], [\"M\", \"B\", \"7\", \"8\", \"9\"], [\"F\", \"G\", \"del\", \"0\", \"#\"]]\n\n\nexport default class Qlicky extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            baseInput: \"\",\n\n            title: setProp(props.title, \"Qlicky\"),\n            logo: setProp(props.logo, logo),\n            useTitle: setProp(props.useTitle, false),\n\n            icon: setProp(props.icon, appleTouchIcon),\n\n            logoWidth: setProp(props.logoWidth, 150),\n            qrWidth: setProp(props.qrWidth, 250),\n\n            baseKeyboardClass: setProp(props.baseKeyboardClass, \"keyboard-content\"),\n            defaultButtonClass: setProp(props.defaultButtonClass, \"keyboard-button\"),\n\n            floorButtonVariant: setProp(props.floorButtonVariant, defaultFloorVariant),\n            floorButtonFont: setProp(props.floorButtonFont, defaultFloorFontColor),\n\n            numberButtonVariant: setProp(props.numberButtonVariant, defaultNumberVariant),\n            numberButtonFont: setProp(props.numberButtonFont, defaultNumberFontColor),\n\n            dangerButtonVariant: setProp(props.dangerButtonVariant, defaultDangerVariant),\n            dangerButtonFont: setProp(props.dangerButtonFont, defaultDangerFontColor),\n\n            buttonFontSize: setProp(props.buttonFontSize, buttonFontSize),\n\n            keys: setProp(props.keyboard, defaultKeyboard)\n        };\n    }\n\n    componentDidMount() {\n        document.title = this.state.title\n    }\n\n    handleClick = (e) => {\n        const value = e.target.name === 'del' ? \"\" : this.state.baseInput + e.target.name\n        this.setState(\n            { baseInput: value }\n        )\n    }\n\n    button = (name) => {\n        let buttonVariant = this.state.numberButtonVariant\n        let fontColor = this.state.numberButtonFont\n        if (name === \"del\"){\n            buttonVariant = this.state.dangerButtonVariant\n            fontColor = this.state.dangerButtonFont\n        } else if(isLetter(name.charAt(0))){\n            buttonVariant = this.state.floorButtonVariant\n            fontColor = this.state.floorButtonFont\n        }\n        return (\n            <Button\n                name={name}\n                onClick={this.handleClick}\n                className={this.state.defaultButtonClass}\n                style={{\n                    fontSize: this.state.buttonFontSize,\n                    fontWeight: \"bold\",\n                    backgroundColor: buttonVariant,\n                    borderColor: buttonVariant,\n                    color: fontColor,\n                }}>\n                {name}\n            </Button>\n        )\n    }\n\n    keyboard = () => {\n\n        return (\n            <div>\n                <table align=\"center\" className={this.state.baseKeyboardClass}>\n                    <tbody>\n                        {this.state.keys.map((listValue, _) => {\n                            return (\n                                <tr>\n                                    {listValue.map((key, _) => {\n                                    return (\n                                        <td>{this.button(key)}</td>\n                                    )\n                                    })}\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n\n    handleChange = (e) => {\n        this.setState({ [e.target.name]: e.target.value })\n    }\n\n    render() {\n        return (\n            <div>\n                <Helmet>\n                    <title>{this.state.title}</title>\n                    <meta name={this.state.title} content={this.state.title} />\n                    <link rel=\"icon\" type=\"image/png\" href={this.state.icon} sizes=\"16x16\" />\n                    <link rel=\"apple-touch-icon\" type=\"image/png\" href={this.state.icon} sizes=\"16x16\" />\n                </Helmet>\n                <br />\n                {this.state.useTitle ?\n                    <h1>{this.state.title}</h1> :\n                    <img src={this.state.logo} alt=\"\" width={this.state.logoWidth}></img>}\n                <br /><br />\n                <QRCode value={this.state.baseInput} size={this.state.qrWidth} renderAs=\"svg\"\n                    fgColor={this.state.baseInput === \"\" ? \"#DCDCDC\" : \"#000000\"}\n                    bgColor={this.state.baseInput === \"\" ? \"#DCDCDC\" : \"#FFFFFF\"}></QRCode> <br /> <br />\n\n                <TextField\n                    name=\"baseInput\"\n                    id=\"outlined-basic\"\n                    label=\"Where to?\"\n                    variant=\"outlined\"\n                    onChange={this.handleChange}\n                    value={this.state.baseInput}\n                    style={{\n                        fontSize: \"30px\",\n                        fontWeight: \"bold\",\n                        alignItems: \"center\",\n                        align: \"center\",\n                    }} />\n                <br></br>\n                <br></br>\n\n                <div>\n                    {this.keyboard()}\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport logo from './langham.png'\nimport Qlicky from './qlicky.js'\n\nconst appleTouchIcon = \"icons/langhamplace/langham.ico\"\n\n\nexport default class Lamgham extends React.Component {\n    render() {\n        return (\n            <div>\n                <Qlicky\n                    title=\"Langham Place\"\n                    logo={logo}\n                    icon={appleTouchIcon}\n                    logoWidth={200}\n                ></Qlicky>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport kone from './kone.png'\nimport Qlicky from './qlicky.js'\n\nconst appleTouchIcon = \"icons/kone/kone.ico\"\n\nexport default class Kone extends React.Component {\n    render() {\n        return (\n            <div>\n                <Qlicky\n                    title=\"KONE\"\n                    logo={kone}\n                    icon={appleTouchIcon}\n                    ></Qlicky>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport Langham from \"./locations/langham.js\"\nimport Kone from \"./locations/kone.js\"\nimport Qlicky from './locations/qlicky.js'\nimport { Route, Switch } from 'react-router-dom';\n\nfunction App() {\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Switch>\n\t\t\t\t<Route exact path=\"/\" component={Qlicky} />\n\t\t\t\t<Route exact path=\"/langhamplace\" component={Langham} />\n\t\t\t\t<Route exact path=\"/kone\" component={Kone} />\n\t\t\t</Switch>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom'\n\nconst app = (\n  <HashRouter basename={process.env.PUBLIC_URL}>\n    <App/>\n  </HashRouter>\n)\n\nconsole.log(\"Hello V1, \" + process.env.PUBLIC_URL);\nReactDOM.render( app,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}