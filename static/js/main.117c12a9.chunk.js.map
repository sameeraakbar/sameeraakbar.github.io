{"version":3,"sources":["locations/commercial.js","locations/residential.js","App.js","serviceWorker.js","index.js"],"names":["QRCode","require","Commericial","props","handleChange","e","state","freeze","setState","target","name","value","console","log","baseInput","Container","Row","Col","align","TextField","label","onChange","this","size","renderAs","React","Component","Residence","handleClick","resetClicked","keyboard","className","Button","variant","onClick","style","fontSize","App","path","component","Commercial","exact","Residential","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.117c12a9.chunk.js","sourcesContent":["import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Row, Col } from 'react-bootstrap'\nimport TextField from '@material-ui/core/TextField'\n\nvar QRCode = require('qrcode.react');\n\n\nexport default class Commericial extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            baseInput: \"\",\n        };\n    }\n\n    handleChange = (e) => {\n        if (!this.state.freeze) {\n            this.setState({ [e.target.name]: e.target.value })\n            console.log(this.state)\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Container>\n                    <Row>\n                        <Col>\n                            <h1 align='center'>Qlicky</h1>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <TextField name=\"baseInput\" label=\"Where to?\" onChange={this.handleChange} /> <br /> <br />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <QRCode value={this.state.baseInput} size={200} renderAs=\"svg\"></QRCode>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        )\n    }\n}","import '../App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport { Button } from 'react-bootstrap'\n\n\nvar QRCode = require('qrcode.react');\n\nconst buttonFontSize = 30;\n\nexport default class Residence extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            baseInput: \"\",\n        };\n    }\n\n    handleClick = (e) => {\n        console.log(e.target.name)\n        this.setState(\n            { baseInput: this.state.baseInput + e.target.name }\n        )\n    }\n\n    resetClicked = (e) => {\n        this.setState(\n            { baseInput: \"\" }\n        )\n    }\n\n    keyboard = () => {\n        return (\n            <div>\n                <table align=\"center\" className=\"keyboard-content\">\n                    <tr>\n                        <td>\n                            <Button name=\"UG\" variant=\"light\" onClick={this.handleClick} className=\"keyboard-button\" style={{fontSize: buttonFontSize}}>UG</Button>\n                        </td>\n                        <td>\n                            <Button name=\"1\" variant=\"dark\" onClick={this.handleClick} className=\"keyboard-button\" style={{fontSize: buttonFontSize}}>1</Button>\n                        </td>\n                        <td>\n                            <Button name=\"2\" variant=\"dark\" onClick={this.handleClick} className=\"keyboard-button\" style={{fontSize: buttonFontSize}}>2</Button>\n                        </td>\n                        <td>\n                            <Button name=\"3\" variant=\"dark\" onClick={this.handleClick} className=\"keyboard-button\" style={{fontSize: buttonFontSize}}>3</Button>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                            <Button name=\"LG\" variant=\"light\" onClick={this.handleClick} className=\"keyboard-button\" style={{fontSize: buttonFontSize}}>LG</Button>\n                        </td>\n                        <td>\n                            <Button name=\"4\" variant=\"dark\" onClick={this.handleClick} className=\"keyboard-button\" style={{fontSize: buttonFontSize}}>4</Button>\n                        </td>\n                        <td>\n                            <Button name=\"5\" variant=\"dark\" onClick={this.handleClick} className=\"keyboard-button\" style={{fontSize: buttonFontSize}}>5</Button>\n                        </td>\n                        <td>\n                            <Button name=\"6\" variant=\"dark\" onClick={this.handleClick} className=\"keyboard-button\" style={{fontSize: buttonFontSize}}>6</Button>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                            <Button name=\"B\" variant=\"light\" onClick={this.handleClick} className=\"keyboard-button\" style={{fontSize: buttonFontSize}}>B</Button>\n                        </td>\n                        <td>\n                            <Button name=\"7\" variant=\"dark\" onClick={this.handleClick} className=\"keyboard-button\" style={{fontSize: buttonFontSize}}>7</Button>\n                        </td>\n                        <td>\n                            <Button name=\"8\" variant=\"dark\" onClick={this.handleClick} className=\"keyboard-button\" style={{fontSize: buttonFontSize}}>8</Button>\n                        </td>\n                        <td>\n                            <Button name=\"9\" variant=\"dark\" onClick={this.handleClick} className=\"keyboard-button\" style={{fontSize: buttonFontSize}}>9</Button>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                            <Button name=\"G\" variant=\"light\" onClick={this.handleClick} className=\"keyboard-button\" style={{fontSize: buttonFontSize}}>G</Button>\n                        </td>\n                        <td>\n                            <Button name=\"del\" variant=\"danger\" onClick={this.resetClicked} className=\"keyboard-button\" style={{fontSize: buttonFontSize}}>del</Button>\n                        </td>\n                        <td>\n                            <Button name=\"0\" variant=\"dark\" onClick={this.handleClick} className=\"keyboard-button\" style={{fontSize: buttonFontSize}}>0</Button>\n                        </td>\n                        <td>\n                            <Button name=\"#\" variant=\"dark\" onClick={this.handleClick} className=\"keyboard-button\" style={{fontSize: buttonFontSize}}>#</Button>\n                        </td>\n                    </tr>\n                </table>\n            </div>\n        )\n    }\n\n\n    render() {\n        return (\n            <div>\n                <h1 align='center'>Qlicky</h1> <br></br>\n                <QRCode value={this.state.baseInput} size={200}></QRCode> <br /> <br />\n                <h2>{this.state.baseInput !== \"\" ? this.state.baseInput : \"Welcome\"}</h2>\n                <div>\n                    {this.keyboard()}\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport Commercial from './locations/commercial.js'\nimport Residential from './locations/residential.js'\nimport { BrowserRouter, Route } from 'react-router-dom';\n \nfunction App() {\n\n\treturn (\n\t\t <BrowserRouter>\n        <div className=\"App\">\n\t\t\t<Route path=\"/\" component={Commercial} exact/>\n             <Route path=\"/residence\" component={Residential} exact/>\n             <Route path=\"/commercial\" component={Commercial}/>\n        </div> \n      </BrowserRouter>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}