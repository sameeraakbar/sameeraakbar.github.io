{"version":3,"sources":["locations/langham.png","locations/kone.png","locations/templates/commercial.js","locations/langham.js","locations/templates/residential.js","locations/kone.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","QRCode","require","Commericial","props","handleChange","e","setState","target","name","value","state","baseInput","title","logo","logoWidth","Container","Row","Col","undefined","this","src","alt","width","TextField","label","onChange","size","renderAs","fgColor","bgColor","React","Component","Lamgham","langham","Residence","handleClick","resetClicked","console","log","button","font","variant","action","Button","onClick","className","defaultButtonClass","style","fontSize","backgroundColor","borderColor","color","keyboard","align","baseKeyboardClass","lightButtonFont","lightButtonVariant","darkButtonFont","darkButtonVariant","dangerButtonVariant","Kone","kone","App","exact","path","component","Commercial","Residential","Langham","Boolean","window","location","hostname","match","app","basename","process","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.172f6acc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/langham.753cb62e.png\";","module.exports = __webpack_public_path__ + \"static/media/kone.29357ec4.png\";","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Row, Col } from 'react-bootstrap'\nimport TextField from '@material-ui/core/TextField'\n\nvar QRCode = require('qrcode.react');\n\n\nexport default class Commericial extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            baseInput: \"\",\n            title: props.title,\n            logo: props.logo,\n            logoWidth: props.logoWidth,\n        };\n    }\n\n    handleChange = (e) => {\n        this.setState({ [e.target.name]: e.target.value })\n    }\n\n    render() {\n        return (\n            <div>\n                <Container>\n                    <Row>\n                        <Col>\n                            <br />\n                            {this.state.logo === undefined ?\n                                this.state.title === undefined ?\n                                    <h1>Qlicky</h1> :\n                                    <h1>{this.state.title}</h1> :\n                                <img src={this.state.logo} alt=\"\" width={this.state.logoWidth === undefined ? 200 : this.state.logoWidth}></img>}\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <TextField name=\"baseInput\" label=\"Where to?\" onChange={this.handleChange} /> <br /> <br />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <QRCode value={this.state.baseInput} size={200} renderAs=\"svg\"\n                                fgColor={this.state.baseInput === \"\" ? \"#DCDCDC\" : \"#000000\"}\n                                bgColor={this.state.baseInput === \"\" ? \"#DCDCDC\" : \"#FFFFFF\"}></QRCode>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport langham from './langham.png'\nimport Commercial from './templates/commercial.js'\n\nexport default class Lamgham extends React.Component {\n    render() {\n        return (\n            <div>\n                <Commercial logo={langham} logoWidth={200}></Commercial>\n            </div>\n        )\n    }\n}","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport {Button} from 'react-bootstrap'\n\nvar QRCode = require('qrcode.react');\n\nconst buttonFontSize = 30;\n\nexport default class Residence extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            baseInput: \"\",\n            title: props.title,\n            logo: props.logo,\n            logoWidth: props.logoWidth,\n            defaultButtonClass: props.defaultButtonClass === undefined ? \"keyboard-button\" : props.defaultButtonClass,\n            lightButtonVariant: props.lightButtonVariant === undefined ? \"light\" : props.lightButtonVariant,\n            lightButtonFont: props.lightButtonFont === undefined ? \"#FFFFFF\" : props.lightButtonFont,\n            darkButtonVariant: props.darkButtonVariant === undefined ? \"dark\" : props.darkButtonVariant,\n            darkButtonFont: props.darkButtonFont === undefined ? \"#FFFFFF\" : props.darkButtonFont,\n            dangerButtonVariant: props.dangerButtonVariant === undefined ? \"\" : props.dangerButtonVariant,\n            baseKeyboardClass: props.baseKeyboardClass === undefined ? \"keyboard-button\" : props.baseKeyboardClass\n        };\n    }\n\n    handleClick = (e) => {\n        this.setState(\n            { baseInput: this.state.baseInput + e.target.name }\n        )\n    }\n\n    resetClicked = (e) => {\n        console.log(\"Reset Text\")\n        this.setState(\n            { baseInput: \"\" }\n        )\n    }\n\n    button = (name, font, variant, action = this.handleClick) => {\n        return (\n            <Button \n            name={name}\n            onClick={action} \n            className={this.state.defaultButtonClass} \n            style={{ \n                    fontSize: buttonFontSize, \n                    backgroundColor: variant,\n                    borderColor: variant,\n                    color: font,\n                }}>\n                {name}\n            </Button>\n        )\n    }\n\n    keyboard = () => {\n        return (\n            <div>\n                <table align=\"center\" className={this.state.baseKeyboardClass}>\n                    <tbody>\n                        <tr>\n                            <td>\n                                {this.button(\"U\", this.state.lightButtonFont, this.state.lightButtonVariant)}\n                            </td>\n                            <td>\n                                {this.button(\"1\", this.state.darkButtonFont, this.state.darkButtonVariant)}\n                            </td>\n                            <td>\n                                {this.button(\"2\", this.state.darkButtonFont, this.state.darkButtonVariant)}\n                            </td>\n                            <td>\n                                {this.button(\"3\", this.state.darkButtonFont, this.state.darkButtonVariant)}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                {this.button(\"L\", this.state.lightButtonFont, this.state.lightButtonVariant)}\n                            </td>\n                            <td>\n                                {this.button(\"4\", this.state.darkButtonFont, this.state.darkButtonVariant)}\n                            </td>\n                            <td>\n                                {this.button(\"5\", this.state.darkButtonFont, this.state.darkButtonVariant)}\n                            </td>\n                            <td>\n                                {this.button(\"6\", this.state.darkButtonFont, this.state.darkButtonVariant)}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                {this.button(\"B\", this.state.lightButtonFont, this.state.lightButtonVariant)}\n                            </td>\n                            <td>\n                                {this.button(\"7\", this.state.darkButtonFont, this.state.darkButtonVariant)}\n                            </td>\n                            <td>\n                                {this.button(\"8\", this.state.darkButtonFont, this.state.darkButtonVariant)}\n                            </td>\n                            <td>\n                                {this.button(\"9\", this.state.darkButtonFont, this.state.darkButtonVariant)}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                {this.button(\"G\", this.state.lightButtonFont, this.state.lightButtonVariant)}\n                            </td>\n                            <td>\n                                {this.button(\"del\", this.state.lightButtonFont, this.state.dangerButtonVariant, this.resetClicked)}\n                            </td>\n                            <td>\n                                {this.button(\"0\", this.state.darkButtonFont, this.state.darkButtonVariant)}\n                            </td>\n                            <td>\n                                {this.button(\"#\", this.state.darkButtonFont, this.state.darkButtonVariant)}\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n\n\n    render() {\n        return (\n            <div>\n                <br />\n                {this.state.logo === undefined ?\n                    this.state.title === undefined ?\n                        <h1>Qlicky</h1> :\n                        <h1>{this.state.title}</h1> :\n                    <img src={this.state.logo} alt=\"\" width={this.state.logoWidth === undefined ? 200 : this.state.logoWidth}></img>}\n                <br /><br />\n                <QRCode value={this.state.baseInput} size={200} renderAs=\"svg\"\n                    fgColor={this.state.baseInput === \"\" ? \"#DCDCDC\" : \"#000000\"}\n                    bgColor={this.state.baseInput === \"\" ? \"#DCDCDC\" : \"#FFFFFF\"}></QRCode> <br /> <br />\n\n                <h2>{this.state.baseInput !== \"\" ? this.state.baseInput : \"Welcome\"}</h2>\n                <div>\n                    {this.keyboard()}\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport kone from './kone.png'\nimport Residential from './templates/residential.js'\n\nexport default class Kone extends React.Component {\n\n    render() {\n        return (\n\n            <div>\n                <Residential\n                    logo={kone}\n                    logoWidth={200}\n                    defaultButtonClass=\"kone-button\"\n                    lightButtonVariant=\"#1976d2\"\n                    darkButtonVariant=\"#f5f5f5\"\n                    darkButtonFont=\"#000000\"\n                    dangerButtonVariant=\"#212121\"\n                    baseKeyboardClass=\"kone-content\"></Residential>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport Commercial from './locations/templates/commercial.js'\nimport Langham from \"./locations/langham.js\"\nimport Kone from \"./locations/kone.js\"\nimport Residential from './locations/templates/residential.js'\nimport { Route, Switch } from 'react-router-dom';\n\nfunction App() {\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Switch>\n\t\t\t\t<Route exact path={`/`} component={Commercial} />\n\t\t\t\t<Route exact path={`/residence`} component={Residential}/>\n\t\t\t\t<Route exact path={`/commercial`} component={Commercial} />\n\t\t\t\t<Route exact path={`/langhamplace`} component={Langham} />\n\t\t\t\t<Route exact path={`/kone`} component={Kone} />\n\t\t\t</Switch>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\nconst app = (\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <App/>\n  </BrowserRouter>\n)\n\nconsole.log(\"Hello V1, \" + process.env.PUBLIC_URL);\nReactDOM.render( app,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}